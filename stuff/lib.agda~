open import Level
open import Function hiding (const)
open import Relation.Binary.PropositionalEquality as P
open import Relation.Binary.HeterogeneousEquality as H
open import Data.Product

const : ∀ {α β} {A : Set α} {B : A -> Set β} -> (x : A) -> B x -> A
const x = λ _ -> x

-- Is it in the standard library? I cannot find.
_<->_ : ∀ {α β} -> Set α -> Set β -> Set (α ⊔ β)
A <-> B = (A -> B) × (B -> A) 

unsubst : ∀ {α γ} {A : Set α} {C : A -> Set γ} {i j : A} (p : i ≡ j) {x : C i} {y : C j}
        -> P.subst C p x ≡ y -> x ≅ y
unsubst refl refl = refl

subst-removable-≡ : ∀ {ι α γ} {I : Set ι} {C : Set γ} {i j : I}
                  -> (A : I -> Set α)
                  -> (i≡j : i ≡ j)
                  -> (x : A i)
                  -> (f : ∀ {k} -> A k -> C)
                  -> f (P.subst A i≡j x) ≡ f x
subst-removable-≡ A refl x f = refl

subst-removable-↔ : ∀ {ι α} {I : Set ι} {c : I -> Level} {i j : I}
                  -> (A : I -> Set α)
                  -> (i≡j : i ≡ j)
                  -> (x : A i)
                  -> (F : ∀ {k} -> A k -> Set (c k))
                  -> F (P.subst A i≡j x) <-> F x
subst-removable-↔ A refl x F = id , id

isubst : ∀ {ι α γ} {I : Set ι} {A : I -> Set α} {i j : I} {x : A i} {y : A j}
       -> (C : ∀ {i} -> A i -> Set γ) -> i ≅ j -> x ≅ y -> C x -> C y
isubst C refl refl = id

icong : ∀ {ι α γ} {I : Set ι} {i j : I}
      -> (A : I -> Set α) {B : {k : I} -> A k -> Set γ} {x : A i} {y : A j}
      -> (f : {k : I} -> (x : A k) -> B x)
      -> i ≅ j
      -> x ≅ y
      -> f x ≅ f y
icong A f refl refl = refl

ext-cong : ∀ {α β γ} {A : Set α} {B : A -> Set β} {C : Set γ} {f g : (x : A) -> B x}
         -> (h : ((x : A) -> B x) -> C)
         -> (∀ x -> f x ≡ g x)
         -> (∃₂ λ x (hv : B x -> C) -> ∀ f -> h f ≡ hv (f x))
         -> h f ≡ h g
ext-cong {f = f} {g} _ p (x , _ , q) rewrite q f | p x | q g = refl
